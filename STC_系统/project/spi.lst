C51 COMPILER V9.54   SPI                                                                   01/09/2019 09:17:12 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE SPI
OBJECT MODULE PLACED IN .\spi.obj
COMPILER INVOKED BY: D:\Program Files (x86)\keil\C51\BIN\C51.EXE ..\system\spi\spi.c LARGE OPTIMIZE(8,SPEED) BROWSE INCD
                    -IR(..\hardware\chuankou;..\hardware\dongtai;..\hardware\flash;..\hardware\huanjing;..\hardware\led_key;..\hardware\paint
                    -;..\hardware\ruqing;..\hardware\touch_main;..\hardware\yaokong;..\hardware\zitai;..\main;..\system\bin;..\system\delay;.
                    -.\system\iic;..\system\interrupt;..\system\spi;..\system\stc;..\tft_touch_sd\font;..\tft_touch_sd\touch;..\tft_touch_sd\
                    -tft;..\tft_touch_sd\txt;..\hardware\peizhi;..\hardware\communicat;..\hardware\phonebook) DEBUG OBJECTEXTEND PRINT(.\spi.
                    -lst) TABS(2) OBJECT(.\spi.obj)

line level    source

   1          #include "STC15F2K60S2.h"
   2          #include "spi.h"
   3          
   4          /**单片机作为主机，NRF24L01作为从机**/
   5          sbit NR_MOSI = P4^1;
   6          sbit NR_MISO = P4^2;
   7          sbit NR_SCK = P4^3;
   8          
   9          void Init_SPI(void)        //SPI初始化，
  10          {
  11   1        AUXR1 |= 0X20;  //将 SPI 调整到 P4.1 P4.2 P4.3,默认是在P1口
  12   1        SPDAT = 0;    //清空SPI寄存器
  13   1        SPCTL = 0xd0; //1101 0000 
  14   1                //SSIG 1 开启主机模式 SPEN 1 SPI使能  DORD 0 先发最高位   MSTR 1 主机模式
  15   1                // CPOL 0  SPICLK空闲时为低 
  16   1                // CPHA  0  在ssig=1时未定义(数据在SPICLK的前时钟沿驱动)  时钟CPU_CLK/4 
  17   1        SPSTAT=0xc0;             //SPDAT.7和SPDAT.6写11，可以将中断标志清零。注意是写1才清零
  18   1        P4M1 |=(1<<2)|(1<<5);
  19   1        P4M0 &=~(1<<2)|(1<<5);
  20   1        //IE2 |= 0x02;           //允许SPI中断
  21   1        //EA =1;                 //开总中断
  22   1      }
  23          //SPI为全双工通讯  所以在发送的同时可以接收到数据
  24          unsigned char SPI_SendByte(unsigned char SPI_SendData)
  25          {
  26   1        unsigned char i;
  27   1          for(i=0;i<8;i++)              // output 8-bit
  28   1          {
  29   2          NR_MOSI = (SPI_SendData & 0x80);         // output 'uchar', MSB to MOSI
  30   2          SPI_SendData = (SPI_SendData << 1);           // shift next bit into MSB..
  31   2          NR_SCK = 1;                      // Set SCK high..
  32   2          SPI_SendData |= NR_MISO;//放在下语句后也行 // capture current MISO bit
  33   2          NR_SCK = 0;                 // ..then set SCK low again
  34   2          }
  35   1      
  36   1          return(SPI_SendData);                 // return read uchar
  37   1      /*  SPDAT= SPI_SendData;     // 将数据 写入 SPDAT数据寄存器
  38   1        while((SPSTAT&0x80)==0); //等待写入完成
  39   1        SPSTAT = 0xc0;           //清除中断标志，和写冲突标志，注意是对应位写1才能清零
  40   1        return  SPDAT;           //返回得到的数据
  41   1      */
  42   1      }
  43          
  44          
  45          /****************************************************************************************************
  46          /*函数：uint SD_SPI_SendByte(uint uchar)
  47          /*功能：IO模拟SPI主机通信时序
  48           SPI：上升沿发送、下降沿接收、高位先发送。 
  49               上升沿到来的时候，sdo上的电平将被发送到从设备的寄存器中。
  50             下降沿到来的时候，sdi上的电平将被接收到主设备的寄存器中。
C51 COMPILER V9.54   SPI                                                                   01/09/2019 09:17:12 PAGE 2   

  51          /***************************************************************************************************
  52          unsigned char NRF_SPI_SendByte(unsigned char uchar)
  53          {
  54            unsigned char i;
  55              for(i=0;i<8;i++) // output 8-bit
  56              {
  57              SD_MOSI = (uchar & 0x80);         // output 'uchar', MSB to MOSI
  58              uchar = (uchar << 1);           // shift next bit into MSB..
  59              SD_SCK = 1;                      // Set SCK high..
  60              uchar |= SD_MISO;//放在下语句后也行 // capture current MISO bit
  61              SD_SCK = 0;                 // ..then set SCK low again
  62              }
  63              return(uchar);                // return read uchar
  64          }
  65          
  66          
  67          */
  68          
  69          
  70          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     45    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
