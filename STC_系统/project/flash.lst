C51 COMPILER V9.54   FLASH                                                                 01/09/2019 14:30:03 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE FLASH
OBJECT MODULE PLACED IN .\flash.obj
COMPILER INVOKED BY: D:\Program Files (x86)\keil\C51\BIN\C51.EXE ..\hardware\flash\flash.c LARGE OPTIMIZE(8,SPEED) BROWS
                    -E INCDIR(..\hardware\chuankou;..\hardware\dongtai;..\hardware\flash;..\hardware\huanjing;..\hardware\led_key;..\hardware
                    -\paint;..\hardware\ruqing;..\hardware\touch_main;..\hardware\yaokong;..\hardware\zitai;..\main;..\system\bin;..\system\d
                    -elay;..\system\iic;..\system\interrupt;..\system\spi;..\system\stc;..\tft_touch_sd\font;..\tft_touch_sd\touch;..\tft_tou
                    -ch_sd\tft;..\tft_touch_sd\txt;..\hardware\peizhi;..\hardware\communicat;..\hardware\phonebook) DEBUG OBJECTEXTEND PRINT(
                    -.\flash.lst) TABS(2) OBJECT(.\flash.obj)

line level    source

   1          #include "STC15F2K60S2.h"
   2          #include <intrins.h>
   3          #include  "delay.h"         //延时函数
   4          #include  "tft.h"
   5          #include  "flash.h"
   6          #include  "stdio.h"
   7          #include  "chuankou.h"
   8          /**单片机作为主机，W25Q64作为从机**/
   9          sbit W25_CS = P5^0;
  10          sbit NR_MOSI = P1^3;
  11          sbit NR_MISO = P1^4;
  12          sbit NR_SCK = P1^5;
  13          
  14          sbit SD_CS   = P1^2;
  15          
  16          unsigned int DEVICE_ID = 0xEF17;  //W25Q64的制造商标志
  17          bit f_spistatus = 0;
  18          
  19          
  20          
  21          
  22          /************************************************
  23          SPI中断服务程序
  24          //***********************************************/
  25          //void spi_isr() interrupt 9
  26          //{
  27          //  SPSTAT = SPIF|WCOL;  //清除SPI状态位
  28          //  f_spistatus = FALSE;
  29          //}
  30          
  31          /****************************************
  32          SPI初始化    初始化时未使能SPI
  33          *****************************************/
  34          void InitSpi(void)
  35          {
  36   1          P1M1 |=(1<<4);
  37   1        P1M0 &=~(1<<4);
  38   1      
  39   1        P1M1 &=~(1<<3)|(1<<5);
  40   1        P1M0 |=(1<<3)|(1<<5);
  41   1      
  42   1        P5M1 &=~(1<<0);
  43   1        P5M0 |=(1<<0);
  44   1      
  45   1        ACC = P_SW1;         //切换到第一组spi
  46   1        ACC &= ~(SPI_S0|SPI_S1);   //SPI_S0=0;SPI_S1=0
  47   1        P_SW1 |= ACC;        //(P1.2/SS,P1.3/MOSI,P1.4/MISO,P1.5/SCLK)
  48   1      
  49   1        SPSTAT = SPIF|WCOL;          //清除SPI状态
  50   1        W25_CS = 1;
C51 COMPILER V9.54   FLASH                                                                 01/09/2019 14:30:03 PAGE 2   

  51   1        SPDAT = 0;    //清空SPI寄存器
  52   1        SPCTL = SPEN|SSIG|MSTR|SPDL;      //设置SPI为主模式,
  53   1                        //注意：时钟选为CPU_CLK/16,选择CPU_CLK/4传输出错，建议时钟频率一般不要超过3MHz
  54   1      
  55   1      //  IE2|=ESPI;
  56   1      //  EA =1;
  57   1      }
  58          // 功能：读取W25Q16芯片的状态。
  59          // 返回值：状态寄存器数据字节
  60          // 注：W25X16内部状态寄存器第0位=0表示空闲，0位=1表示忙。
  61          unsigned char W25Q16_ReadStatus()
  62          {
  63   1          unsigned char status=0;
  64   1          W25_CS=0;
  65   1          SpiSendData(W25X_CMD_ReadStatusReg1);   // 0x05读取状态的命令字
  66   1          status=SpiSendData(0xff);        // 读取状态字节
  67   1          W25_CS=1;                         // 关闭片选
  68   1          return status;
  69   1      } 
  70          /**********************************************************************
  71          函数名称：ReadDeviceID
  72          函数功能：读取Device ID
  73          入口参数：无
  74          出口参数：
  75                      DeviceID-------->设备ID
  76          ***********************************************************************/
  77          unsigned int ReadDeviceID(void)
  78          {
  79   1          unsigned int DeviceID=0;
  80   1          while(W25Q16_ReadStatus()&0x01);    //判断是否忙
  81   1          W25_CS = 0;
  82   1      //  f_spistatus=1;
  83   1          SpiSendData(0x90);
  84   1          
  85   1          SpiSendData(0x00);
  86   1          SpiSendData(0x00);
  87   1          SpiSendData(0x00);
  88   1        
  89   1          DeviceID = (SpiSendData(0xff) << 8);
  90   1          DeviceID |= SpiSendData(0xff);
  91   1          W25_CS = 1;
  92   1          return DeviceID;
  93   1      }
  94          /***********************************************************************
  95          函数名称：SpiSendData
  96          函数功能：SPI发送数据
  97          入口参数：
  98                    tData----------------->待发送数据
  99          出口参数：无
 100          ************************************************************************/
 101          
 102          unsigned char SpiSendData(unsigned char tData)
 103          {  
 104   1          SPDAT = tData;      //发送缓冲区为空时发送数据  
 105   1          while(!(SPSTAT & 0x80));//等待发送完毕
 106   1        SPSTAT = SPIF|WCOL;//设置状态寄存器初值
 107   1        return SPDAT;
 108   1      }
 109          
 110          void Spi_Flash_init(void)
 111          {
 112   1      //  DEVICE_ID = ReadDeviceID();//读取Flash ID
C51 COMPILER V9.54   FLASH                                                                 01/09/2019 14:30:03 PAGE 3   

 113   1        Flash_ChipErase();//Flash 擦除
 114   1      }
 115          
 116          /**********************************************************************
 117          函数名称：Flash_32K_Erase
 118          函数功能：32K 区域擦除
 119          入口参数：
 120          出口参数：
 121          ***********************************************************************/
 122          void Flash_64K_Erase(unsigned long EraseAddr)
 123          {
 124   1      
 125   1      //  EraseAddr*=W25Q64_BLOCK_SIZE;
 126   1        SpiWriteEn();
 127   1        
 128   1        W25_CS = 0;
 129   1        
 130   1        SpiSendData(0xd8);  //64K区域擦除
 131   1        SpiSendData((EraseAddr & 0xFF0000) >> 16);
 132   1        SpiSendData((EraseAddr & 0xFF00) >> 8);
 133   1        SpiSendData(EraseAddr & 0xFF);
 134   1        W25_CS = 1;
 135   1        SPI_FLASH_WaitForWriteEnd();
 136   1      }  
 137          /**********************************************************************
 138          函数名称：Flash_4K_Erase
 139          函数功能：4K 区域擦除  扇区擦除
 140          入口参数：
 141          出口参数：
 142          ***********************************************************************/
 143          void Flash_4K_Erase(unsigned long EraseAddr)
 144          {
 145   1      
 146   1      //    EraseAddr*=W25Q64_SECTOR_SIZE;
 147   1          SpiWriteEn();
 148   1          
 149   1          W25_CS = 0;
 150   1          
 151   1          SpiSendData(0x20);  //4K区域擦除
 152   1          SpiSendData((EraseAddr & 0xFF0000) >> 16);
 153   1          SpiSendData((EraseAddr & 0xFF00) >> 8);
 154   1          SpiSendData(EraseAddr & 0xFF);
 155   1          W25_CS = 1;
 156   1        SPI_FLASH_WaitForWriteEnd();
 157   1      }
 158          
 159          /*********************************************************************
 160          函数名称：Flash_ChipErase
 161          函数功能：整片擦除                            
 162          *********************************************************************/                      
 163          void Flash_ChipErase(void)
 164          {
 165   1        SpiWriteEn(); //写使能
 166   1        W25_CS = 0;
 167   1      //  f_spistatus=2;
 168   1        SpiSendData(W25X_CMD_ChipErase);   //发送整片擦除指令
 169   1        W25_CS = 1;
 170   1        SPI_FLASH_WaitForWriteEnd();
 171   1      }
 172          /***********************************************************************
 173          函数功能：SPI延时
 174          ***********************************************************************/
C51 COMPILER V9.54   FLASH                                                                 01/09/2019 14:30:03 PAGE 4   

 175          void SpiDelay(void)
 176          {
 177   1          _nop_();
 178   1        _nop_();
 179   1        _nop_();
 180   1        _nop_();
 181   1        _nop_();
 182   1      }
 183          /***********************************************************************
 184          函数名称：SpiWriteEn
 185          函数功能：SPI写使能
 186          入口参数：无
 187          出口参数：无
 188          ************************************************************************/
 189          void SpiWriteEn(void)
 190          {
 191   1          W25_CS = 0;
 192   1      //  SpiDelay();
 193   1      //  f_spistatus=3;
 194   1          SpiSendData(W25X_CMD_WriteEnable);   //发送写使能指令
 195   1          W25_CS = 1;
 196   1      }   
 197          /**************************************************************************
 198          函数名称：SPI_FLASH_WaitForWriteEnd
 199          函数功能：读Flash芯片状态寄存器的值并且循环读取标志位直到写周期结束
 200          入口参数：无
 201          出口参数：无
 202           *************************************************************************/
 203          void SPI_FLASH_WaitForWriteEnd(void)
 204          {
 205   1        unsigned char FLASH_Status = 0;
 206   1        W25_CS = 0;
 207   1      
 208   1        // 发送读状态寄存器命令，发送完之后，状态寄存器的值会被传送到STM8 
 209   1      //  f_spistatus=4;
 210   1        SpiSendData(W25X_CMD_ReadStatusReg1); //读取Flash 状态寄存器1
 211   1      
 212   1        // 循环查询标志位 等待写周期结束 
 213   1        do
 214   1        {
 215   2          //0x00是一个无意义的指令 发这条指令是为了生成FLASH芯片需要的时钟
 216   2          //并且将FLASH的状态寄存器的值读回单片机   ********并不是很懂
 217   2        FLASH_Status =  SpiSendData(0x00);
 218   2        }
 219   1        while ((FLASH_Status & 0x01) == 0x01);//若没有写完则一直等待，保持CS=0
 220   1      
 221   1        W25_CS = 1;
 222   1      }
 223          ///************************************************************************
 224          //函数名称：Spi_PageWrite
 225          //函数功能：Flash  页写
 226          //入口参数：
 227          //    tBuf---------->待发数据指针
 228          //    tWriteAddr---->发送至Flash的地址    
 229          //    tNum---------->发送数据个数         
 230          //*************************************************************************/
 231          //unsigned int tgmwrit=0;
 232          //unsigned int twrite1,twrite2;
 233          //void Spi_PageWrite(unsigned char* tBuf,unsigned long tWriteAddr,unsigned int tNum)
 234          //{
 235          //  while(W25Q16_ReadStatus()&0x01);    //判断是否忙
 236          //  SpiWriteEn();
C51 COMPILER V9.54   FLASH                                                                 01/09/2019 14:30:03 PAGE 5   

 237          //  W25_CS = 0;
 238          ////  f_spistatus=6;
 239          //  SpiSendData(W25X_CMD_PageProgram);//页写指令
 240          //  SpiSendData((tWriteAddr & 0xff0000) >> 16);
 241          //  SpiSendData((tWriteAddr & 0xff00) >> 8);
 242          //  SpiSendData(tWriteAddr & 0xff);
 243          //  while(tNum--)
 244          //  {
 245          //    SpiSendData(*tBuf);
 246          //    tBuf++;
 247          //  }
 248          //  
 249          //  W25_CS = 1;
 250          //  SPI_FLASH_WaitForWriteEnd();
 251          ////  tSpiWriteAddr = tWriteAddr + tNum;//下次写地址。2013-11-06  gm
 252          //}
 253          ////无检验写SPI FLASH
 254          ////必须确保所写的地址范围内的数据全部为0XFF,否则在非0XFF处写入的数据将失败!
 255          ////具有自动换页功能
 256          ////在指定地址开始写入指定长度的数据
 257          ////pbuf:数据存储区
 258          ////WriteAddr:开始写入的地址(24bit)
 259          ////Len:要写入的字节数(最大65535)
 260          //void SPI_Flash_Write_NoCheck(unsigned char* pbuf,unsigned long WriteAddr,unsigned int Len)
 261          //{
 262          //    unsigned int PageLen;                  // 页内写入字节长度
 263          //    PageLen=256-WriteAddr%256;    // 单页剩余的字节数 （单页剩余空间）
 264          //    if(Len<=PageLen) PageLen=Len; // 不大于256 个字节
 265          //    while(1)
 266          //    {
 267          //        Spi_PageWrite(pbuf,WriteAddr,PageLen);
 268          //        if(PageLen==Len)break;   // 写入结束了
 269          //        else
 270          //        {
 271          //            pbuf+=PageLen;
 272          //            WriteAddr+=PageLen;
 273          //            Len-=PageLen;              //  减去已经写入了的字节数
 274          //            if(Len>256)PageLen=256;   // 一次可以写入256 个字节
 275          //            else PageLen=Len;          // 不够256 个字节了
 276          //        }
 277          //    }
 278          //}
 279          /************************************************************************
 280          函数名称：Spi_PageRead
 281          函数功能：Flash  页读取
 282          入口参数：
 283              tBuf---------->接收数据缓冲区指针
 284              tWriteAddr---->读取的Flash地址  
 285              tNum---------->读取数据个数         
 286          *************************************************************************/
 287          unsigned int tgmread=0;
 288          unsigned int t_read,t_read1;
 289          void Spi_PageRead(unsigned char* pBuf, unsigned long tReadAddr, unsigned int tNum)
 290          {
 291   1        while(W25Q16_ReadStatus()&0x01); 
 292   1        W25_CS = 0;
 293   1      //  f_spistatus=7;
 294   1        SpiSendData(W25X_CMD_ReadData);//数据读取指令
 295   1          
 296   1        SpiSendData((tReadAddr & 0xff0000) >> 16);
 297   1        SpiSendData((tReadAddr & 0xff00) >> 8);
 298   1        SpiSendData(tReadAddr & 0xff);
C51 COMPILER V9.54   FLASH                                                                 01/09/2019 14:30:03 PAGE 6   

 299   1        
 300   1        while (tNum--) 
 301   1        {
 302   2      
 303   2          *pBuf = SpiSendData(0xff);
 304   2          pBuf++;
 305   2      
 306   2        }
 307   1        W25_CS = 1;
 308   1      }
 309          //
 310          //void SDOpen(void)
 311          //{
 312          //  SD_CS=0;
 313          //  SPCTL &=0xbf;  //开SD ,关W25Q64
 314          //}
 315          //
 316          //void W25Open(void)
 317          //{
 318          //  SD_CS=1;
 319          //  SPCTL|=SPEN;  //关SD ,开W25Q64
 320          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    462    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      8      19
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
